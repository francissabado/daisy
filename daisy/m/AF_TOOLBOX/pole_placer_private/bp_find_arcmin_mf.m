	function [Zm1, Zm2] = bp_find_arcmin_mf(Z1, Z2, NIN, NZ, q)	  	% Finds the arc minimum frequencies in the stopbands	% given the attenuation pole vectors Z1 and Z2, 	% the number of attenuation poles at infinity NIN, 	% the number of attenuation poles at the origin NZ 	% and the passband quotient q  =  wb/wa.	% Z1 lower stopband	% Z2 upper stopband		% Author: 			Per Loewenborg    % Modified by:		LW	% Copyright:		Divison of Electronics Systems	%					Dept. Electrical Engineering, Linkoping University, Sweden	% Version: 			1		% Known bugs:		None	% Report bugs to:	larsw@isy.liu.se		Zm1 = [];	Zm2 = [];	Ztot = [Z2 Z1];	m = NZ+NIN+2*length(Ztot);	A_sq = ( (q^(2*NZ))*prod(Ztot.^4) )^(1/m);	% Upper stopband	N = length(Z2);	if NIN > 0 		if N > 1 			for k = 1:N-1				ZA = Z2(k);				ZB = Z2(k+1);				ZZA = ZA*ZA;				ZZB = ZB*ZB;				ZZ0 = (A_sq*(ZZA+ZZB)+2*ZZA*ZZB)/(ZZA+ZZB+2*A_sq);				D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);				ZZ1 = ZZ0-1e-6;				while abs(ZZ1-ZZ0) > 1e-9  % Shall be smaller than the tolerance above.					D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);					ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);					if (ZZ2 < ZZA)						ZZ2 = ZZA+0.001;      					end 			   					if (ZZ2 > ZZB)						ZZ2 = ZZB-0.01;					end 			   					D0 = D1;					ZZ0 = ZZ1;					ZZ1 = ZZ2;				end 			   				Zm2 = [Zm2 sqrt(ZZ2)];			end 			   			% Last arc			ZA = Z2(N);			ZZA = ZA*ZA;			ZZ0 = (A_sq*(1+(NIN/2)*ZZA)+ZZA*(1+(NIN/2)))/((NIN/2)+ZZA+A_sq*(1+(NIN/2)));			D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);			ZZ1 = ZZ0-1e-6;			while abs(ZZ1-ZZ0) > 1e-9    % Shall be smaller than the tolerance above.				D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);				ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);				if (ZZ2 < ZZA)					ZZ2 = ZZA+0.0001;      				end				if (ZZ2 > 1)					ZZ2 = 0.9999;				end				D0 = D1;				ZZ0 = ZZ1;				ZZ1 = ZZ2;			end         			Zm2 = [Zm2 sqrt(ZZ2)];					elseif N == 1			ZA = Z2(N);			ZZA = ZA*ZA;			ZZ0 = (A_sq*(1+(NIN/2)*ZZA)+ZZA*(1+(NIN/2)))/((NIN/2)+ZZA+A_sq*(1+(NIN/2)));			D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);			ZZ1 = ZZ0-1e-6;			while abs(ZZ1-ZZ0) > 1e-9   % Shall be smaller than the tolerance above.				D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);				ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);				if (ZZ2 < ZZA)					ZZ2 = ZZA+0.001;      				end				if (ZZ2 > 1)					ZZ2 = 0.99;				end				D0 = D1;				ZZ0 = ZZ1;				ZZ1 = ZZ2;			end    			Zm2 = [Zm2 sqrt(ZZ2)];		else  			disp('No attenuation poles in upper stop band.')		end  	elseif NIN == 0  		if N > 1    			for k = 1:N-1				ZA = Z2(k);				ZB = Z2(k+1);				ZZA = ZA*ZA;				ZZB = ZB*ZB;				ZZ0 = (A_sq*(ZZA+ZZB)+2*ZZA*ZZB)/(ZZA+ZZB+2*A_sq);				D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);				ZZ1 = ZZ0-1e-6;				while abs(ZZ1-ZZ0) > 1e-9  % Shall be smaller than the tolerance above.					D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);					ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);					if (ZZ2 < ZZA)						ZZ2 = ZZA+0.001;      					end 			   					if (ZZ2 > ZZB)						ZZ2 = ZZB-0.01;					end 			   					D0 = D1;					ZZ0 = ZZ1;					ZZ1 = ZZ2;				end 			   				Zm2 = [Zm2 sqrt(ZZ2)]			end 			    			% Last arc    			ZZ2 = 1; % 0.9999999			Zm2 = [Zm2 ZZ2]		elseif N == 1    			ZZ2 = 1; % 0.9999999			Zm2 = [Zm2 ZZ2]		else    			disp('No attenuation poles in upper stop band.')		end	else		disp('Error-Negative number of attenuation poles at infinity.')	end	% Lower stopband	N = length(Z1);	if NZ > 0		if N > 1			for k = 1:N-1				ZA = Z1(k);				ZB = Z1(k+1);				ZZA = ZA*ZA;				ZZB = ZB*ZB;				ZZ0 = (A_sq*(ZZA+ZZB)+2*ZZA*ZZB)/(ZZA+ZZB+2*A_sq);				D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);				ZZ1 = ZZ0-1e-6;				while abs(ZZ1-ZZ0) > 1e-9 	    % Shall be smaller than the tolerance above.					D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);					ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);					if (ZZ2 < ZZA)						ZZ2 = ZZA+0.001;      					end 			   					if (ZZ2 > ZZB)						ZZ2 = ZZB-0.001;					end 			   					D0 = D1;					ZZ0 = ZZ1;					ZZ1 = ZZ2;				end 			   				Zm1 = [Zm1 sqrt(ZZ2)];			end 			   			% First arc			ZB = Z1(1);			ZZB = ZB*ZB;			ZZ0 = (A_sq*(q^2+(NZ/2)*ZZB)+(1+(NZ/2))*(q^2)*ZZB)/((NZ/2)*(q^2)+ZZB+(1+(NZ/2))*A_sq);			D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);			ZZ1 = ZZ0-1e-6;			while abs(ZZ1-ZZ0) > 1e-9 	    % Shall be smaller than the tolerance above.				D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);				ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);				if (ZZ2 < q)					ZZ2 = q+0.0001;      				end				if (ZZ2 > ZZB)					ZZ2 = ZZB-0.0001;				end				D0 = D1;				ZZ0 = ZZ1;				ZZ1 = ZZ2;			end         			Zm1 = sort([Zm1 sqrt(ZZ2)]);					elseif N == 1			ZB = Z1(1);			ZZB = ZB*ZB;			ZZ0 = (A_sq*(q^2+(NZ/2)*ZZB)+(1+(NZ/2))*(q^2)*ZZB)/((NZ/2)*(q^2)+ZZB+(1+(NZ/2))*A_sq);			D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);			ZZ1 = ZZ0-1e-6;			while abs(ZZ1-ZZ0) > 1e-9 	    % Shall be smaller than the tolerance above.				D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);				ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);				if (ZZ2 < q)					ZZ2 = q+0.0001;      				end				if (ZZ2 > ZZB)					ZZ2 = ZZB-0.0001;				end				D0 = D1;				ZZ0 = ZZ1;				ZZ1 = ZZ2;			end         			Zm1 = [Zm1 sqrt(ZZ2)];		else			disp('No attenuation poles in lower stop band.')		end		elseif NZ == 0		if N > 1			for k = 1:N-1				ZA = Z1(k);				ZB = Z1(k+1);				ZZA = ZA*ZA;				ZZB = ZB*ZB;				ZZ0 = (A_sq*(ZZA+ZZB)+2*ZZA*ZZB)/(ZZA+ZZB+2*A_sq);				D0 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ0);				ZZ1 = ZZ0-1e-6;				while abs(ZZ1-ZZ0) > 1e-9 	   % Shall be smaller than the tolerance above.					D1 = bpmf_d_func(Ztot,NIN,NZ,q,ZZ1);					ZZ2 = (ZZ0*D1-ZZ1*D0)/(D1-D0);					if (ZZ2 < ZZA)						ZZ2 = ZZA+0.001;      					end 			   					if (ZZ2 > ZZB)						ZZ2 = ZZB-0.01;					end 			   					D0 = D1;					ZZ0 = ZZ1;					ZZ1 = ZZ2;				end 			   				Zm1 = [Zm1 sqrt(ZZ2)]			end 			   			% First arc    			Zm1 = sort([Zm1 q])		elseif N == 1			Zm1 = sort([Zm1 q])		else			disp('No attenuation poles in lower stop band.')		end	else		disp('Error-Negative number of attenuation poles at the origin.');	end